import os
import pytest
import tempfile
import sys
import json
from pathlib import Path
from unittest.mock import patch, MagicMock, call

# Add the src directory to the path
sys.path.append(str(Path(__file__).parent.parent / "backend" / "src"))

# Import modules
from video_processor import VideoProcessor
from youtube_source import YouTubeSource
from local_source import LocalFileSource


@pytest.fixture
def temp_dir():
    """Create a temporary directory for testing"""
    temp_dir = tempfile.mkdtemp()
    yield temp_dir
    # Clean up
    import shutil
    shutil.rmtree(temp_dir)


@pytest.fixture
def test_links_file(temp_dir):
    """Create a test file with video links"""
    file_path = os.path.join(temp_dir, "test_links.txt")
    with open(file_path, 'w') as f:
        f.write("https://www.youtube.com/watch?v=dQw4w9WgXcQ\n")
        f.write("https://www.youtube.com/watch?v=ABC123\n")
        f.write("file:///path/to/local/video.mp4\n")
    return file_path


@pytest.fixture
def mock_db_helper():
    """Create a mock DatabaseHelper"""
    with patch("video_processor.DatabaseHelper") as mock:
        mock_instance = MagicMock()
        mock.return_value = mock_instance
        yield mock_instance


@pytest.fixture
def mock_preview_creator():
    """Create a mock VideoPreviewCreator"""
    with patch("video_processor.VideoPreviewCreator") as mock:
        mock_instance = MagicMock()
        mock.return_value = mock_instance
        yield mock_instance


@pytest.fixture
def mock_youtube_source():
    """Create a mock YouTubeSource"""
    mock = MagicMock(spec=YouTubeSource)
    mock.is_valid_url.return_value = True
    return mock


@pytest.fixture
def mock_local_source():
    """Create a mock LocalFileSource"""
    mock = MagicMock(spec=LocalFileSource)
    mock.is_valid_url.return_value = False  # Set to False by default, will be overridden in specific tests
    return mock


@pytest.fixture
def video_processor(temp_dir, mock_db_helper, mock_preview_creator):
    """Create a VideoProcessor with mocked dependencies"""
    processor = VideoProcessor(temp_dir)
    
    # Replace the initialized dependencies with mocks
    processor.db_helper = mock_db_helper
    processor.preview_creator = mock_preview_creator
    
    return processor


def test_init(temp_dir):
    """Test initialization of VideoProcessor"""
    processor = VideoProcessor(temp_dir)
    
    # Check that directories are created
    assert os.path.exists(temp_dir)
    
    # Check that dependencies are initialized
    assert processor.db_helper is not None
    assert processor.preview_creator is not None
    
    # Check that sources are registered
    assert "youtube" in processor.video_sources
    assert "local" in processor.video_sources
    assert isinstance(processor.video_sources["youtube"], YouTubeSource)
    assert isinstance(processor.video_sources["local"], LocalFileSource)


def test_register_source(video_processor, mock_youtube_source):
    """Test registering a new video source"""
    # Register a new source
    video_processor.register_source("test_source", mock_youtube_source)
    
    # Check that the source was registered
    assert "test_source" in video_processor.video_sources
    assert video_processor.video_sources["test_source"] == mock_youtube_source


def test_ensure_user_directories(video_processor, temp_dir):
    """Test creating user directories"""
    # Call the function
    paths = video_processor.ensure_user_directories("test_user")
    
    # Check that the directories were created
    assert os.path.exists(os.path.join(temp_dir, "test_user"))
    assert os.path.exists(os.path.join(temp_dir, "test_user", "temp_videos"))
    assert os.path.exists(os.path.join(temp_dir, "test_user", "thumbnails"))
    assert os.path.exists(os.path.join(temp_dir, "test_user", "previews"))
    
    # Check the returned paths
    assert paths["user_dir"] == os.path.join(temp_dir, "test_user")
    assert paths["temp_dir"] == os.path.join(temp_dir, "test_user", "temp_videos")
    assert paths["thumbnails_dir"] == os.path.join(temp_dir, "test_user", "thumbnails")
    assert paths["gif_dir"] == os.path.join(temp_dir, "test_user", "previews")


def test_is_duplicate(video_processor, mock_db_helper):
    """Test checking for duplicates"""
    # Set up the mock
    mock_db_helper.is_duplicate.return_value = True
    
    # Call the function
    result = video_processor.is_duplicate("https://example.com/video", "abc123")
    
    # Check the result
    assert result is True
    
    # Check that the database helper was called
    mock_db_helper.is_duplicate.assert_called_once_with("https://example.com/video", "abc123")


def test_process_url_youtube(video_processor, mock_youtube_source, mock_preview_creator, mock_db_helper, temp_dir):
    """Test processing a YouTube URL"""
    # Set up mocks
    video_processor.video_sources["youtube"] = mock_youtube_source
    mock_youtube_source.is_valid_url.return_value = True
    mock_youtube_source.download_video.return_value = (
        os.path.join(temp_dir, "test_user", "temp_videos", "test_video.mp4"),
        os.path.join(temp_dir, "test_user", "thumbnails", "test_video_thumbnail.jpg"),
        "Test Video",
        "This is a test video",
        2023
    )
    mock_youtube_source.generate_content_hash.return_value = "abc123"
    mock_db_helper.is_duplicate.return_value = False
    mock_preview_creator.create_mp4_preview.return_value = os.path.join(temp_dir, "test_user", "previews", "test_video_preview.mp4")
    mock_preview_creator.create_gif_preview.return_value = os.path.join(temp_dir, "test_user", "previews", "test_video.gif")
    
    # Call the function
    result = video_processor.process_url("https://www.youtube.com/watch?v=dQw4w9WgXcQ", "test_user")
    
    # Check the result
    assert result is not None
    assert result["url"] == "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    assert result["source"] == "youtube"
    assert result["title"] == "Test Video"
    assert result["upload_year"] == 2023
    assert result["preview_type"] == "mp4"  # MP4 should be preferred
    
    # Check that the video source was called
    mock_youtube_source.is_valid_url.assert_called_once_with("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    mock_youtube_source.download_video.assert_called_once()
    
    # Check that previews were created
    mock_preview_creator.create_mp4_preview.assert_called_once()
    mock_preview_creator.create_gif_preview.assert_called_once()
    
    # Check that the result was saved to the database
    mock_db_helper.save_to_database.assert_called_once_with(result)


def test_process_url_local(video_processor, mock_local_source, mock_preview_creator, mock_db_helper, temp_dir):
    """Test processing a local file URL"""
    # Set up mocks
    video_processor.video_sources["local"] = mock_local_source
    video_processor.video_sources["youtube"].is_valid_url.return_value = False
    mock_local_source.is_valid_url.return_value = True
    mock_local_source.download_video.return_value = (
        os.path.join(temp_dir, "test_user", "temp_videos", "local_video.mp4"),
        os.path.join(temp_dir, "test_user", "thumbnails", "local_video_thumbnail.jpg"),
        "Local Video",
        "This is a local test video",
        2022
    )
    mock_local_source.generate_content_hash.return_value = "def456"
    mock_db_helper.is_duplicate.return_value = False
    mock_preview_creator.create_mp4_preview.return_value = None  # MP4 creation fails
    mock_preview_creator.create_gif_preview.return_value = os.path.join(temp_dir, "test_user", "previews", "local_video.gif")
    
    # Call the function
    result = video_processor.process_url("file:///path/to/local/video.mp4", "test_user")
    
    # Check the result
    assert result is not None
    assert result["url"] == "file:///path/to/local/video.mp4"
    assert result["source"] == "local"
    assert result["title"] == "Local Video"
    assert result["upload_year"] == 2022
    assert result["preview_type"] == "gif"  # GIF should be used since MP4 failed
    
    # Check that the video source was called
    mock_local_source.is_valid_url.assert_called_once_with("file:///path/to/local/video.mp4")
    mock_local_source.download_video.assert_called_once()
    
    # Check that previews were created
    mock_preview_creator.create_mp4_preview.assert_called_once()
    mock_preview_creator.create_gif_preview.assert_called_once()
    
    # Check that the result was saved to the database
    mock_db_helper.save_to_database.assert_called_once_with(result)


def test_process_url_duplicate(video_processor, mock_youtube_source, mock_db_helper, temp_dir):
    """Test handling duplicate videos"""
    # Set up mocks
    video_processor.video_sources["youtube"] = mock_youtube_source
    mock_youtube_source.is_valid_url.return_value = True
    mock_youtube_source.download_video.return_value = (
        os.path.join(temp_dir, "test_user", "temp_videos", "test_video.mp4"),
        os.path.join(temp_dir, "test_user", "thumbnails", "test_video_thumbnail.jpg"),
        "Test Video",
        "This is a test video",
        2023
    )
    mock_youtube_source.generate_content_hash.return_value = "abc123"
    mock_db_helper.is_duplicate.return_value = True  # This is a duplicate
    
    # Call the function
    result = video_processor.process_url("https://www.youtube.com/watch?v=dQw4w9WgXcQ", "test_user")
    
    # Check the result
    assert result is None
    
    # Check that no previews were created
    assert not hasattr(video_processor.preview_creator, 'create_mp4_preview')
    
    # Check that nothing was saved to the database
    mock_db_helper.save_to_database.assert_not_called()


def test_process_url_no_source(video_processor, temp_dir):
    """Test handling URLs with no compatible source"""
    # Set up mocks for all sources to reject the URL
    for source in video_processor.video_sources.values():
        source.is_valid_url.return_value = False
    
    # Call the function
    result = video_processor.process_url("https://example.com/unknown", "test_user")
    
    # Check the result
    assert result is None
    
    # Check that sources were checked
    for source in video_processor.video_sources.values():
        source.is_valid_url.assert_called_once_with("https://example.com/unknown")


@patch("builtins.open", new_callable=MagicMock)
def test_process_links_file(mock_open, video_processor, test_links_file, temp_dir):
    """Test processing a file with multiple links"""
    # Set up mock to process one URL successfully and fail on others
    video_processor.process_url = MagicMock()
    video_processor.process_url.side_effect = [
        {"url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "title": "Video 1"},
        None,  # Second URL fails
        {"url": "file:///path/to/local/video.mp4", "title": "Video 3"}
    ]
    
    # Call the function
    results = video_processor.process_links_file(test_links_file, "test_user")
    
    # Check the results
    assert len(results) == 2
    assert results[0]["title"] == "Video 1"
    assert results[1]["title"] == "Video 3"
    
    # Check that process_url was called for each line
    assert video_processor.process_url.call_count == 3
    video_processor.process_url.assert_has_calls([
        call("https://www.youtube.com/watch?v=dQw4w9WgXcQ", "test_user"),
        call("https://www.youtube.com/watch?v=ABC123", "test_user"),
        call("file:///path/to/local/video.mp4", "test_user")
    ])


def test_save_results(video_processor, temp_dir):
    """Test saving results to JSON"""
    # Create test data
    results = [
        {
            "user": "test_user",
            "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            "source": "youtube",
            "title": "Test Video 1",
            "upload_year": 2023
        },
        {
            "user": "test_user",
            "url": "file:///path/to/local/video.mp4",
            "source": "local",
            "title": "Test Video 2",
            "upload_year": 2022
        }
    ]
    
    # Create user directory
    user_dir = os.path.join(temp_dir, "test_user")
    os.makedirs(user_dir, exist_ok=True)
    
    # Call the function
    paths = video_processor.save_results(results, "test_user")
    
    # Check the result
    assert "json_path" in paths
    assert os.path.exists(paths["json_path"])
    
    # Check the content of the JSON file
    with open(paths["json_path"], 'r') as f:
        saved_data = json.load(f)
    
    assert len(saved_data) == 2
    assert saved_data[0]["title"] == "Test Video 1"
    assert saved_data[1]["title"] == "Test Video 2"


def test_process_local_directory(video_processor, temp_dir):
    """Test processing a directory of local videos"""
    # Create a test directory with video files
    video_dir = os.path.join(temp_dir, "videos")
    os.makedirs(video_dir, exist_ok=True)
    
    # Create some fake video files
    video_paths = [
        os.path.join(video_dir, "video1.mp4"),
        os.path.join(video_dir, "video2.mp4"),
        os.path.join(video_dir, "subdir", "video3.mp4")
    ]
    
    # Create the subdirectory
    os.makedirs(os.path.join(video_dir, "subdir"), exist